N = 8  # Number of queens

def print_solution(board):
    for row in board:
        line = ""
        for cell in row:
            line += "Q " if cell else ". "
        print(line)
    print()

def is_safe(board, row, col):
    # Check this column in previous rows
    for i in range(row):
        if board[i][col]:
            return False

    # Check upper-left diagonal
    for i, j in zip(range(row-1, -1, -1), range(col-1, -1, -1)):
        if board[i][j]:
            return False

    # Check upper-right diagonal
    for i, j in zip(range(row-1, -1, -1), range(col+1, N)):
        if board[i][j]:
            return False

    return True

def solve_n_queens(board, row=0):
    if row == N:
        print_solution(board)
        return True

    result = False
    for col in range(N):
        if is_safe(board, row, col):
            board[row][col] = 1
            result = solve_n_queens(board, row + 1) or result
            board[row][col] = 0  # Backtrack
    return result

if __name__ == "__main__":
    board = [[0 for _ in range(N)] for _ in range(N)]
    if not solve_n_queens(board):
        print("No solution found.")
